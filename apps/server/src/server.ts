/* eslint-disable antfu/no-top-level-await */
/* eslint-disable no-console */
import type { Hono } from 'hono'
import { sql } from 'drizzle-orm'
import { db } from '../db'
import { trips, users } from '../db/schema'
import Server from './app'
import { totalTripsGauge, totalUsersGauge } from './services/metrics.service'

const app: Hono = Server.getApp()
const port = Number(process.env.PORT) || 8080
const host = process.env.HOST || '0.0.0.0'

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.
 */
async function updateDatabaseMetrics() {
  try {
    const [userCountResult] = await db.select({ count: sql<number>`count(*)` }).from(users)
    totalUsersGauge.set(Number(userCountResult.count))

    const [tripCountResult] = await db.select({ count: sql<number>`count(*)` }).from(trips)
    totalTripsGauge.set(Number(tripCountResult.count))
  }
  catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
  }
}

console.log(`üöÄ Trip Scheduler API starting...`)
console.log(`üìç Server running at http://${host}:${port}`)

try {
  console.log('üü° –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...')
  await db.execute(sql`SELECT 1`)
  console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')

  setInterval(updateDatabaseMetrics, 30000)
  updateDatabaseMetrics()
}
catch {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

  process.exit(1)
}

export default {
  port,
  hostname: host,
  fetch: app.fetch,
}
