// db/seed-from-mock.ts

/* eslint-disable no-console */
import fs from 'node:fs/promises'
import path from 'node:path'
import process from 'node:process'
import url from 'node:url'
import prompts from 'prompts'
import { FREE_PLAN_ID, ONE_GIGABYTE_IN_BYTES } from '~/lib/constants'
import { db } from './index'
import {
  activities,
  comments,
  communities,
  communityMembers,
  days,
  emailVerificationTokens,
  llmModels,
  llmTokenUsage,
  memories,
  plans,
  refreshTokens,
  tripImages,
  tripParticipants,
  trips,
  tripSections,
  users,
} from './schema'

async function copyStaticFiles() {
  const sourceDir = path.join(__dirname, 'mock/static')
  const destDir = path.join(process.cwd(), 'static')

  try {
    console.log(`üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ ${sourceDir} –≤ ${destDir}...`)
    await fs.rm(destDir, { recursive: true, force: true })
    console.log('üöÆ –°—Ç–∞—Ä–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è static —É–¥–∞–ª–µ–Ω–∞.')
    await fs.cp(sourceDir, destDir, { recursive: true })
    console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã.')
  }
  catch (error) {
    if (error instanceof Error && 'code' in error && error.code === 'ENOENT')
      console.warn(`‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${sourceDir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.`)
    else
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:', error)
  }
}

/**
 * 1. –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ mock-—Ñ–∞–π–ª—ã.
 * 2. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –Ω–∏—Ö –í–°–ï –¥–∞–Ω–Ω—ã–µ.
 * 3. –ü–†–û–í–ï–†–Ø–ï–¢, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö.
 * 4. –°—Ç—Ä–æ–∏—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –°–£–©–ù–û–°–¢–ï–ô.
 */
async function discoverAndSelectData() {
  const mockDirs = [path.join(__dirname, 'mock')]
  const discovered = {
    users: new Map<string, any>(),
    trips: new Map<string, any>(),
    communities: new Map<string, any>(),
    members: [] as any[],
  }

  console.log('üîç –ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö...')
  for (const dir of mockDirs) {
    try {
      const files = (await fs.readdir(dir)).filter(f => f.endsWith('.ts'))
      for (const file of files) {
        const filePath = path.join(dir, file)
        const module = await import(url.pathToFileURL(filePath).href)

        // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (Array.isArray(module.MOCK_USER_DATA)) {
          module.MOCK_USER_DATA.forEach((user: any) =>
            discovered.users.set(user.id, user),
          )
        }

        // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –°–æ–æ–±—â–µ—Å—Ç–≤
        if (Array.isArray(module.MOCK_COMMUNITIES_DATA)) {
          module.MOCK_COMMUNITIES_DATA.forEach((community: any) =>
            discovered.communities.set(community.id, community),
          )
        }
        if (Array.isArray(module.MOCK_COMMUNITY_MEMBERS_DATA)) {
          discovered.members.push(...module.MOCK_COMMUNITY_MEMBERS_DATA)
        }

        // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        if (module.MOCK_DATA) {
          const tripsSource = module.MOCK_DATA
          const tripsData = Array.isArray(tripsSource) ? tripsSource : Object.entries(tripsSource)

          for (const item of tripsData) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á (–Ω–∞–∑–≤–∞–Ω–∏–µ) –∏ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±—ä–µ–∫—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)
            const [key, trip] = Array.isArray(item) ? item : [item.id, item]

            if (!trip || !trip.id || !trip.title) {
              console.warn(`\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í —Ñ–∞–π–ª–µ "${path.basename(filePath)}" –Ω–∞–π–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å –∫–ª—é—á–æ–º "${key}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.`)
              continue
            }

            discovered.trips.set(trip.id, trip)
          }
        }
      }
    }
    catch (e) {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–∫–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, e)
    }
  }

  if ([...discovered.users.values(), ...discovered.trips.values(), ...discovered.communities.values()].length === 0) {
    console.warn('‚ö†Ô∏è –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
    return { selectedUsers: [], selectedTrips: [], selectedCommunities: [], selectedMembers: [] }
  }

  const response = await prompts([
    {
      type: discovered.users.size > 0 ? 'multiselect' : null,
      name: 'selectedUsers',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
      choices: [...discovered.users.values()].map(user => ({
        title: `${user.name} (${user.email})`,
        value: user,
        selected: true,
      })),
      hint: '- –ü—Ä–æ–±–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    },
    {
      type: discovered.trips.size > 0 ? 'multiselect' : null,
      name: 'selectedTrips',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –ü–£–¢–ï–®–ï–°–¢–í–ò–Ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
      choices: [...discovered.trips.values()].map(trip => ({
        title: trip.title,
        description: `(${trip.cities?.join(', ') || '–ì–æ—Ä–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã'})`,
        value: trip,
      })),
      hint: '- –ü—Ä–æ–±–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    },
    {
      type: discovered.communities.size > 0 ? 'multiselect' : null,
      name: 'selectedCommunities',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –°–û–û–ë–©–ï–°–¢–í–ê –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
      choices: [...discovered.communities.values()].map(community => ({
        title: community.name,
        value: community,
      })),
      hint: '- –ü—Ä–æ–±–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    },
  ], {
    onCancel: () => {
      console.log('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
      process.exit(0)
    },
  })

  const selectedCommunityIds = new Set((response.selectedCommunities || []).map((c: any) => c.id))
  const selectedMembers = discovered.members.filter(member => selectedCommunityIds.has(member.communityId))

  return {
    selectedUsers: response.selectedUsers || [],
    selectedTrips: response.selectedTrips || [],
    selectedCommunities: response.selectedCommunities || [],
    selectedMembers,
  }
}

async function seed() {
  await copyStaticFiles()
  console.log('üå± –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

  const { selectedUsers, selectedTrips, selectedCommunities, selectedMembers } = await discoverAndSelectData()

  if (selectedUsers.length === 0 && selectedTrips.length === 0 && selectedCommunities.length === 0) {
    console.warn('\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–æ.')
    process.exit(0)
  }

  console.log('\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
  await db.delete(llmTokenUsage)
  await db.delete(llmModels)
  await db.delete(memories)
  await db.delete(activities)
  await db.delete(days)
  await db.delete(comments)
  await db.delete(tripSections)
  await db.delete(tripImages)
  await db.delete(tripParticipants)
  await db.delete(trips)
  await db.delete(communityMembers)
  await db.delete(communities)
  await db.delete(refreshTokens)
  await db.delete(emailVerificationTokens)
  await db.delete(users)
  await db.delete(plans)

  console.log('‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤...')
  await db.insert(plans).values([
    { id: FREE_PLAN_ID, name: '–ë–∞–∑–æ–≤—ã–π', maxTrips: 1, maxStorageBytes: ONE_GIGABYTE_IN_BYTES, monthlyLlmCredits: 100000, isDeveloping: false },
    { id: 2, name: '–ü—Ä–æ', maxTrips: 10, maxStorageBytes: 20 * ONE_GIGABYTE_IN_BYTES, monthlyLlmCredits: 1000000, isDeveloping: false },
    { id: 3, name: '–ö–æ–º–∞–Ω–¥–Ω—ã–π', maxTrips: 999, maxStorageBytes: 100 * ONE_GIGABYTE_IN_BYTES, monthlyLlmCredits: 5000000, isDeveloping: true },
  ])

  console.log('ü§ñ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ LLM –º–æ–¥–µ–ª–∏...')
  await db.insert(llmModels).values([
    { id: 'gemini-2.5-pro', costPerMillionInputTokens: 1.25, costPerMillionOutputTokens: 10.0 },
    { id: 'claude-sonnet-4-5', costPerMillionInputTokens: 3.3, costPerMillionOutputTokens: 16.5 },
    { id: 'gpt-5-codex', costPerMillionInputTokens: 1.25, costPerMillionOutputTokens: 10.0 },
    { id: 'o3', costPerMillionInputTokens: 2.0, costPerMillionOutputTokens: 8.0 },
    { id: 'o4-mini', costPerMillionInputTokens: 1.1, costPerMillionOutputTokens: 4.4 },
    { id: 'gpt-4.1', costPerMillionInputTokens: 2.0, costPerMillionOutputTokens: 8.0 },
    { id: 'gemini-flash-latest', costPerMillionInputTokens: 0.5, costPerMillionOutputTokens: 1.5 },
  ])

  console.log('‚úàÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏...')
  const tripsToInsert: (typeof trips.$inferInsert)[] = []
  const daysToInsert: (typeof days.$inferInsert)[] = []
  const activitiesToInsert: (typeof activities.$inferInsert)[] = []
  const imagesToInsert: (typeof tripImages.$inferInsert)[] = []
  const memoriesToInsert: (typeof memories.$inferInsert)[] = []
  const participantsToInsert: (typeof tripParticipants.$inferInsert)[] = []
  const sectionsToInsert: (typeof tripSections.$inferInsert)[] = []

  for (const tripData of selectedTrips) {
    const {
      days: mockDays,
      images: mockImages,
      memories: mockMemories,
      participantIds,
      sections: mockSections,
      ...tripDetails
    } = tripData

    tripsToInsert.push({
      ...tripDetails,
      startDate: new Date(tripDetails.startDate).toISOString().split('T')[0],
      endDate: new Date(tripDetails.endDate).toISOString().split('T')[0],
    })

    const allParticipantIds = new Set(participantIds || [])
    allParticipantIds.add(tripDetails.userId)

    for (const userId of allParticipantIds) {
      participantsToInsert.push({
        tripId: tripDetails.id,
        userId: userId as string,
      })
    }

    if (mockSections)
      sectionsToInsert.push(...mockSections)

    if (mockDays) {
      for (const mockDay of mockDays) {
        const { activities: mockActivities, ...dayDetails } = mockDay
        daysToInsert.push({
          ...dayDetails,
          date: new Date(dayDetails.date).toISOString().split('T')[0],
          meta: dayDetails.meta ?? [],
          createdAt: dayDetails.createdAt ? new Date(dayDetails.createdAt) : new Date(),
          updatedAt: dayDetails.updatedAt ? new Date(dayDetails.updatedAt) : new Date(),
        })
        if (mockActivities) {
          activitiesToInsert.push(...mockActivities)
        }
      }
    }
    if (mockImages) {
      const processedImages = mockImages.map((image: any) => ({
        ...image,
        originalName: image.originalName || image.url.split('/').pop(),
      }))
      imagesToInsert.push(...processedImages)
    }
    if (mockMemories) {
      for (const mockMemory of mockMemories) {
        memoriesToInsert.push({
          ...mockMemory,
          timestamp: mockMemory.timestamp ? new Date(mockMemory.timestamp) : null,
        })
      }
    }
  }

  console.log(`\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –≤—Å—Ç–∞–≤–∫–µ: ${selectedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${selectedTrips.length} –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, ${selectedCommunities.length} —Å–æ–æ–±—â–µ—Å—Ç–≤.`)
  console.log('‚úçÔ∏è  –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...')

  if (selectedUsers.length > 0)
    await db.insert(users).values(selectedUsers.map((u: any) => ({ ...u, planId: 3 })))

  if (selectedCommunities.length > 0) {
    await db.insert(communities).values(selectedCommunities)
    if (selectedMembers.length > 0)
      await db.insert(communityMembers).values(selectedMembers)
  }

  if (tripsToInsert.length > 0)
    await db.insert(trips).values(tripsToInsert)
  if (sectionsToInsert.length > 0)
    await db.insert(tripSections).values(sectionsToInsert)
  if (participantsToInsert.length > 0)
    await db.insert(tripParticipants).values(participantsToInsert)
  if (daysToInsert.length > 0)
    await db.insert(days).values(daysToInsert)
  if (imagesToInsert.length > 0)
    await db.insert(tripImages).values(imagesToInsert)
  if (activitiesToInsert.length > 0)
    await db.insert(activities).values(activitiesToInsert)
  if (memoriesToInsert.length > 0)
    await db.insert(memories).values(memoriesToInsert)

  console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!')
  process.exit(0)
}

seed().catch((e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e)
  process.exit(1)
})
