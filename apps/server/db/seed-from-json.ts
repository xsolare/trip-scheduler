/* eslint-disable no-console */
import fs from 'node:fs/promises'
import path from 'node:path'
import process from 'node:process'
import prompts from 'prompts'
import { FREE_PLAN_ID, ONE_GIGABYTE_IN_BYTES } from '~/lib/constants'
import { db } from './index'
import {
  activities,
  comments,
  communities,
  communityMembers,
  days,
  emailVerificationTokens,
  llmModels,
  llmTokenUsage,
  memories,
  plans,
  refreshTokens,
  tripImages,
  tripParticipants,
  trips,
  tripSections,
  users,
} from './schema'

/**
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'dump', –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ JSON-–¥–∞–º–ø—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
 * @returns –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ null, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
 */
async function discoverAndSelectDumpFile(): Promise<string | null> {
  const dumpDir = path.join(__dirname, 'dump')
  try {
    const allFiles = await fs.readdir(dumpDir)
    const jsonFilesWithStats = await Promise.all(
      allFiles
        .filter(file => file.endsWith('.json'))
        .map(async (file) => {
          const filePath = path.join(dumpDir, file)
          const stats = await fs.stat(filePath)
          return {
            name: file,
            path: filePath,
            time: stats.mtime.getTime(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
          }
        }),
    )

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É
    const sortedFiles = jsonFilesWithStats.sort((a, b) => b.time - a.time)

    if (sortedFiles.length === 0)
      return null

    const response = await prompts(
      {
        type: 'select',
        name: 'selectedDump',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–º–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
        choices: sortedFiles.map(file => ({
          title: file.name,
          description: `(—Å–æ–∑–¥–∞–Ω: ${new Date(file.time).toLocaleString()})`,
          value: file.path,
        })),
        hint: '- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      },
      {
        onCancel: () => {
          console.log('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
          process.exit(0)
        },
      },
    )

    return response.selectedDump
  }
  catch (error) {
    // –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'dump' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–µ—Ä–Ω–µ–º null
    if (error instanceof Error && 'code' in error && error.code === 'ENOENT')
      return null

    throw error
  }
}

async function seedFromJson() {
  console.log('üå± –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –¥–∞–º–ø–∞...')

  const filePathArg = process.argv[2]
  let dumpFile: string | null

  if (filePathArg) {
    dumpFile = path.resolve(process.cwd(), filePathArg)
    console.log(`üîç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–º–ø–∞: ${path.basename(dumpFile)}`)
  }
  else {
    dumpFile = await discoverAndSelectDumpFile()
    if (!dumpFile) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–∞–º–ø–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ `db/dump`.')
      console.log('‚ÑπÔ∏è  –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –¥–∞–º–ø —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `bun run db:dump`.')
      process.exit(1)
    }
    console.log(`üîç –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–∞–º–ø–∞: ${path.basename(dumpFile)}`)
  }

  let dumpData
  try {
    const fileContent = await fs.readFile(dumpFile, 'utf-8')
    dumpData = JSON.parse(fileContent)
  }
  catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ –¥–∞–º–ø–∞ ${dumpFile}:`, error)
    process.exit(1)
  }

  const { users: sourceUsers, communities: sourceCommunities, communityMembers: sourceMembers, trips: sourceTrips } = dumpData

  if (!Array.isArray(sourceTrips) || !Array.isArray(sourceUsers)) {
    console.warn('‚ö†Ô∏è –§–∞–π–ª –¥–∞–º–ø–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–æ.')
    process.exit(0)
  }

  console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
  await db.delete(llmTokenUsage)
  await db.delete(llmModels)
  await db.delete(memories)
  await db.delete(activities)
  await db.delete(days)
  await db.delete(comments)
  await db.delete(tripSections)
  await db.delete(tripImages)
  await db.delete(tripParticipants)
  await db.delete(trips)
  await db.delete(communityMembers)
  await db.delete(communities)
  await db.delete(refreshTokens)
  await db.delete(emailVerificationTokens)
  await db.delete(users)
  await db.delete(plans)

  console.log('‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤...')
  await db.insert(plans).values([
    { id: FREE_PLAN_ID, name: '–ë–∞–∑–æ–≤—ã–π', maxTrips: 1, maxStorageBytes: ONE_GIGABYTE_IN_BYTES, monthlyLlmCredits: 100000, isDeveloping: false },
    { id: 2, name: '–ü—Ä–æ', maxTrips: 10, maxStorageBytes: 20 * ONE_GIGABYTE_IN_BYTES, monthlyLlmCredits: 1000000, isDeveloping: false },
    { id: 3, name: '–ö–æ–º–∞–Ω–¥–Ω—ã–π', maxTrips: 999, maxStorageBytes: 100 * ONE_GIGABYTE_IN_BYTES, monthlyLlmCredits: 5000000, isDeveloping: true },
  ])

  console.log('ü§ñ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ LLM –º–æ–¥–µ–ª–∏...')
  await db.insert(llmModels).values([
    { id: 'gemini-2.5-pro', costPerMillionInputTokens: 1.25, costPerMillionOutputTokens: 10.0 },
    { id: 'gemini-flash-latest', costPerMillionInputTokens: 0.5, costPerMillionOutputTokens: 1.5 },
    { id: 'claude-sonnet-4-5', costPerMillionInputTokens: 3.3, costPerMillionOutputTokens: 16.5 },
    { id: 'gpt-5-codex', costPerMillionInputTokens: 1.25, costPerMillionOutputTokens: 10.0 },
    { id: 'o3', costPerMillionInputTokens: 2.0, costPerMillionOutputTokens: 8.0 },
    { id: 'o4-mini', costPerMillionInputTokens: 1.1, costPerMillionOutputTokens: 4.4 },
    { id: 'gpt-4.1', costPerMillionInputTokens: 2.0, costPerMillionOutputTokens: 8.0 },
  ])

  console.log('‚úàÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏...')

  if (sourceUsers.length > 0) {
    console.log(`üë§ –í—Å—Ç–∞–≤–∫–∞ ${sourceUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`)
    const usersToInsert = sourceUsers.map((user: any) => ({
      ...user,
      emailVerified: user.emailVerified ? new Date(user.emailVerified) : null,
      llmCreditsPeriodStartDate: user.llmCreditsPeriodStartDate ? new Date(user.llmCreditsPeriodStartDate) : null,
      createdAt: new Date(user.createdAt),
      updatedAt: new Date(user.updatedAt),
    }))
    await db.insert(users).values(usersToInsert)
  }

  if (sourceCommunities.length > 0) {
    console.log(`üèòÔ∏è  –í—Å—Ç–∞–≤–∫–∞ ${sourceCommunities.length} —Å–æ–æ–±—â–µ—Å—Ç–≤...`)
    const communitiesToInsert = sourceCommunities.map((community: any) => ({
      ...community,
      createdAt: new Date(community.createdAt),
      updatedAt: new Date(community.updatedAt),
    }))
    await db.insert(communities).values(communitiesToInsert)
  }

  if (sourceMembers.length > 0) {
    console.log(`üë• –í—Å—Ç–∞–≤–∫–∞ ${sourceMembers.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤...`)
    const membersToInsert = sourceMembers.map((member: any) => ({
      ...member,
      joinedAt: new Date(member.joinedAt),
    }))
    await db.insert(communityMembers).values(membersToInsert)
  }

  const tripsToInsert: (typeof trips.$inferInsert)[] = []
  const daysToInsert: (typeof days.$inferInsert)[] = []
  const activitiesToInsert: (typeof activities.$inferInsert)[] = []
  const imagesToInsert: (typeof tripImages.$inferInsert)[] = []
  const memoriesToInsert: (typeof memories.$inferInsert)[] = []
  const sectionsToInsert: (typeof tripSections.$inferInsert)[] = []
  const participantsToInsert: (typeof tripParticipants.$inferInsert)[] = []

  for (const tripData of sourceTrips) {
    const { days: tripDays, images: tripImagesData, memories: tripMemories, sections, participants, user, ...tripDetails } = tripData

    tripsToInsert.push({
      ...tripDetails,
      startDate: new Date(tripDetails.startDate),
      endDate: new Date(tripDetails.endDate),
      createdAt: new Date(tripDetails.createdAt),
      updatedAt: new Date(tripDetails.updatedAt),
    })

    if (sections) {
      const processedSections = sections.map((section: any) => ({
        ...section,
        createdAt: new Date(section.createdAt),
        updatedAt: new Date(section.updatedAt),
      }))
      sectionsToInsert.push(...processedSections)
    }

    if (participants)
      participantsToInsert.push(...participants)

    if (tripDays) {
      for (const day of tripDays) {
        const { activities: dayActivities, ...dayDetails } = day
        daysToInsert.push({
          ...dayDetails,
          date: new Date(day.date),
          createdAt: new Date(dayDetails.createdAt),
          updatedAt: new Date(dayDetails.updatedAt),
        })
        if (dayActivities) {
          activitiesToInsert.push(...dayActivities.map((activity: any) => ({
            ...activity,
            createdAt: activity.createdAt ? new Date(activity.createdAt) : new Date(),
            updatedAt: activity.updatedAt ? new Date(activity.updatedAt) : new Date(),
          })))
        }
      }
    }

    if (tripImagesData) {
      imagesToInsert.push(...tripImagesData.map((image: any) => ({
        ...image,
        createdAt: image.createdAt ? new Date(image.createdAt) : new Date(),
        takenAt: image.takenAt ? new Date(image.takenAt) : null,
      })))
    }

    if (tripMemories) {
      memoriesToInsert.push(...tripMemories.map((memory: any) => ({
        ...memory,
        timestamp: memory.timestamp ? new Date(memory.timestamp) : null,
        createdAt: memory.createdAt ? new Date(memory.createdAt) : new Date(),
        updatedAt: memory.updatedAt ? new Date(memory.updatedAt) : new Date(),
      })))
    }
  }

  console.log(`‚úàÔ∏è  –í—Å—Ç–∞–≤–∫–∞ ${tripsToInsert.length} –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...`)

  if (tripsToInsert.length > 0)
    await db.insert(trips).values(tripsToInsert)
  if (sectionsToInsert.length > 0)
    await db.insert(tripSections).values(sectionsToInsert)
  if (participantsToInsert.length > 0)
    await db.insert(tripParticipants).values(participantsToInsert)
  if (daysToInsert.length > 0)
    await db.insert(days).values(daysToInsert)
  if (imagesToInsert.length > 0)
    await db.insert(tripImages).values(imagesToInsert)
  if (activitiesToInsert.length > 0)
    await db.insert(activities).values(activitiesToInsert)
  if (memoriesToInsert.length > 0)
    await db.insert(memories).values(memoriesToInsert)

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑ JSON –¥–∞–º–ø–∞!')
  process.exit(0)
}

seedFromJson().catch((e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON:', e)
  process.exit(1)
})
