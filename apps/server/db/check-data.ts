/* eslint-disable no-console */
import process from 'node:process'
import { sql } from 'drizzle-orm'
import { db } from './index'
import {
  activities,
  communities,
  communityMembers,
  days,
  memories,
  tripImages,
  tripParticipants,
  trips,
  tripSections,
  users,
} from './schema'

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ.
 * @param table - –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Drizzle.
 * @param tableName - –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–≤–æ–¥–∞.
 * @returns –û–±—ä–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π.
 */
async function getTableCount(table: any, tableName: string): Promise<{ name: string, count: number }> {
  const [result] = await db
    .select({ count: sql<number>`count(*)` })
    .from(table)
  return { name: tableName, count: result.count }
}

async function checkData() {
  console.log('üßê –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...')

  try {
    console.group('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:')

    const counts = await Promise.all([
      getTableCount(users, 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),
      getTableCount(communities, 'üèòÔ∏è –°–æ–æ–±—â–µ—Å—Ç–≤–∞'),
      getTableCount(communityMembers, 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤'),
      getTableCount(trips, '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'),
      getTableCount(days, 'üìÖ –î–Ω–∏'),
      getTableCount(activities, 'Ïóë –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'),
      getTableCount(tripImages, 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
      getTableCount(memories, 'üìù –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è'),
      getTableCount(tripSections, 'üìö –°–µ–∫—Ü–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'),
      getTableCount(tripParticipants, 'üßë‚Äçü§ù‚Äçüßë –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'),
    ])

    counts.forEach(({ name, count }) => {
      console.log(`   - ${name}: ${count}`)
    })
    console.groupEnd()

    const tripCount = counts.find(c => c.name.includes('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'))?.count ?? 0

    if (tripCount > 0) {
      console.group('\n‚úÖ –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:')

      const firstTrip = await db.query.trips.findFirst({
        with: {
          user: {
            columns: { name: true },
          },
          days: {
            with: {
              activities: { columns: { id: true } },
            },
          },
          participants: { columns: { userId: true } },
          images: { columns: { id: true } },
        },
      })

      if (firstTrip) {
        console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: "${firstTrip.title}"`)
        console.log(`   - –ê–≤—Ç–æ—Ä: ${firstTrip.user.name}`)
        console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: ${firstTrip.days.length}`)
        const totalActivities = firstTrip.days.reduce((acc, day) => acc + day.activities.length, 0)
        console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${totalActivities}`)
        console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${firstTrip.participants.length}`)
        console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${firstTrip.images.length}`)
      }
      else {
        console.log('   - –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏.')
      }
      console.groupEnd()
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
  }
  catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
    process.exit(1)
  }
}

checkData()
