/* eslint-disable no-console */
import fs from 'node:fs/promises'
import path from 'node:path'
import process from 'node:process'
import url from 'node:url'
import { FREE_PLAN_ID, ONE_GIGABYTE_IN_BYTES } from '~/lib/constants'
import { db } from './index'
import {
  activities,
  days,
  memories,
  plans,
  tripImages,
  tripParticipants,
  trips,
  tripSections,
  users,
} from './schema'

async function copyStaticFiles() {
  const sourceDir = path.join(__dirname, 'mock/static')
  const destDir = path.join(process.cwd(), 'static')

  try {
    console.log(`üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ ${sourceDir} –≤ ${destDir}...`)
    await fs.rm(destDir, { recursive: true, force: true })
    console.log('üöÆ –°—Ç–∞—Ä–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è static —É–¥–∞–ª–µ–Ω–∞.')
    await fs.cp(sourceDir, destDir, { recursive: true })
    console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã.')
  }
  catch (error) {
    if (error instanceof Error && 'code' in error && error.code === 'ENOENT')
      console.warn(`‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${sourceDir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.`)
    else
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:', error)
  }
}

/**
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ /mock.
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
 */
async function loadAllMockData() {
  const mockDir = path.join(__dirname, 'mock')
  const allFiles = await fs.readdir(mockDir)
  const mockFiles = allFiles.filter(file => file.endsWith('.ts') && !file.startsWith('_')).sort()

  if (mockFiles.length === 0) {
    return { users: [], trips: [] }
  }

  console.log(`üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${mockFiles.join(', ')}`)

  const allUsers: any[] = []
  const allTrips: any[] = []

  for (const file of mockFiles) {
    const filePath = path.join(mockDir, file)
    const module = await import(url.pathToFileURL(filePath).href)
    if (module.MOCK_USER_DATA)
      allUsers.push(...module.MOCK_USER_DATA)
    if (module.MOCK_DATA)
      allTrips.push(...module.MOCK_DATA)
  }

  return { users: allUsers, trips: allTrips }
}

async function seed() {
  await copyStaticFiles()
  console.log('üå± –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

  const { users: usersToInsert, trips: sourceTrips } = await loadAllMockData()

  if (usersToInsert.length === 0 && sourceTrips.length === 0) {
    console.warn('‚ö†Ô∏è –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–æ.')
    process.exit(0)
  }

  console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
  await db.delete(memories)
  await db.delete(activities)
  await db.delete(days)
  await db.delete(tripSections)
  await db.delete(tripImages)
  await db.delete(trips)
  await db.delete(users)
  await db.delete(plans)

  console.log('‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤...')
  await db.insert(plans).values([
    { id: FREE_PLAN_ID, name: 'Free', maxTrips: 1, maxStorageBytes: ONE_GIGABYTE_IN_BYTES },
    { id: 2, name: 'Pro', maxTrips: 10, maxStorageBytes: 20 * ONE_GIGABYTE_IN_BYTES },
  ])

  console.log('‚úàÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏...')

  const tripsToInsert: (typeof trips.$inferInsert)[] = []
  const daysToInsert: (typeof days.$inferInsert)[] = []
  const activitiesToInsert: (typeof activities.$inferInsert)[] = []
  const imagesToInsert: (typeof tripImages.$inferInsert)[] = []
  const memoriesToInsert: (typeof memories.$inferInsert)[] = []
  const participantsToInsert: (typeof tripParticipants.$inferInsert)[] = []
  const sectionsToInsert: (typeof tripSections.$inferInsert)[] = []

  for (const tripData of sourceTrips) {
    const {
      days: mockDays,
      images: mockImages,
      memories: mockMemories,
      participantIds,
      sections: mockSections,
      ...tripDetails
    } = tripData

    tripsToInsert.push({
      ...tripDetails,
      startDate: new Date(tripDetails.startDate).toISOString().split('T')[0],
      endDate: new Date(tripDetails.endDate).toISOString().split('T')[0],
    })

    const allParticipantIds = new Set(participantIds || [])
    allParticipantIds.add(tripDetails.userId)

    for (const userId of allParticipantIds) {
      participantsToInsert.push({
        tripId: tripDetails.id,
        userId: userId as string,
      })
    }

    if (mockSections)
      sectionsToInsert.push(...mockSections)

    if (mockDays) {
      for (const mockDay of mockDays) {
        const { activities: mockActivities, ...dayDetails } = mockDay

        daysToInsert.push({
          ...dayDetails,
          date: new Date(dayDetails.date).toISOString().split('T')[0],
          meta: dayDetails.meta ?? [],
          createdAt: dayDetails.createdAt ? new Date(dayDetails.createdAt) : new Date(),
          updatedAt: dayDetails.updatedAt ? new Date(dayDetails.updatedAt) : new Date(),
        })

        if (mockActivities) {
          activitiesToInsert.push(...mockActivities)
        }
      }
    }

    if (mockImages)
      imagesToInsert.push(...mockImages)

    if (mockMemories) {
      for (const mockMemory of mockMemories) {
        memoriesToInsert.push({
          ...mockMemory,
          timestamp: mockMemory.timestamp ? new Date(mockMemory.timestamp) : null,
        })
      }
    }
  }

  console.log(`‚úàÔ∏è  –í—Å—Ç–∞–≤–∫–∞ ${usersToInsert.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${tripsToInsert.length} –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, ${daysToInsert.length} –¥–Ω–µ–π, ${activitiesToInsert.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, ${imagesToInsert.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ ${memoriesToInsert.length} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...`)

  // –í—Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è foreign key constraints
  if (usersToInsert.length > 0)
    await db.insert(users).values(usersToInsert.map(u => ({ ...u, planId: FREE_PLAN_ID })))

  if (tripsToInsert.length > 0)
    await db.insert(trips).values(tripsToInsert)
  if (sectionsToInsert.length > 0)
    await db.insert(tripSections).values(sectionsToInsert)
  if (participantsToInsert.length > 0)
    await db.insert(tripParticipants).values(participantsToInsert)
  if (daysToInsert.length > 0)
    await db.insert(days).values(daysToInsert)
  if (imagesToInsert.length > 0)
    await db.insert(tripImages).values(imagesToInsert)
  if (activitiesToInsert.length > 0)
    await db.insert(activities).values(activitiesToInsert)
  if (memoriesToInsert.length > 0)
    await db.insert(memories).values(memoriesToInsert)

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!')
  process.exit(0)
}

seed().catch((e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e)
  process.exit(1)
})
