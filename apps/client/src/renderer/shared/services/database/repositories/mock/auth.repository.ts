import type { IAuthRepository } from '../../model/types'
import type { SignInPayload, SignUpPayload, TokenPair, User } from '~/shared/types/models/auth'
import { throttle } from '../../lib/decorators'

// --- –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
const MOCK_USER = {
  id: 'mock-user-id-123',
  email: 'test@example.com',
  name: 'Mock User',
  avatarUrl: 'https://i.pravatar.cc/150',
  role: 'user',
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  emailVerified: null,
  githubId: null,
  googleId: null,
  statusEmoji: 'üå¥',
  statusText: '–í –æ—Ç–ø—É—Å–∫–µ',
  currentStorageBytes: 0,
  currentTripsCount: 0,
} as User

const MOCK_TOKEN_PAIR: TokenPair = {
  accessToken: 'mock-access-token-string-jwt',
  refreshToken: 'mock-refresh-token-string-uuid',
}

let verificationPendingFor: SignUpPayload | null = null

/**
 * –ú–æ–∫-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
 */
export class AuthRepository implements IAuthRepository {
  private isAuthenticated = false

  @throttle(1000)
  async signUp(payload: SignUpPayload): Promise<{ success: boolean, message: string }> {
    if (payload.email === MOCK_USER.email) {
      return Promise.reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'))
    }
    verificationPendingFor = payload
    // eslint-disable-next-line no-console
    console.log('[Mock] Verification code for', payload.email, 'is 123456')
    return Promise.resolve({ success: true, message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.' })
  }

  @throttle(1000)
  async verifyEmail(payload: { email: string, token: string }): Promise<{ user: User, token: TokenPair }> {
    if (verificationPendingFor && verificationPendingFor.email === payload.email && payload.token === '123456') {
      this.isAuthenticated = true
      const newUser = { ...MOCK_USER, email: payload.email, name: verificationPendingFor.name, emailVerified: new Date().toISOString() } as User
      verificationPendingFor = null
      return Promise.resolve({ user: newUser, token: MOCK_TOKEN_PAIR })
    }
    return Promise.reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'))
  }

  @throttle(1000)
  async signIn(payload: SignInPayload): Promise<{ user: User, token: TokenPair }> {
    if (payload.email === MOCK_USER.email && payload.password === 'password') {
      this.isAuthenticated = true
      return Promise.resolve({ user: MOCK_USER, token: MOCK_TOKEN_PAIR })
    }
    else {
      return Promise.reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'))
    }
  }

  @throttle(500)
  async signOut(): Promise<void> {
    this.isAuthenticated = false
    return Promise.resolve()
  }

  @throttle(800)
  async refresh(refreshToken: string): Promise<{ token: TokenPair }> {
    if (refreshToken === MOCK_TOKEN_PAIR.refreshToken) {
      const newTokens = {
        accessToken: `new-mock-access-token-${Date.now()}`,
        refreshToken: `new-mock-refresh-token-${Date.now()}`,
      }
      return Promise.resolve({ token: newTokens })
    }
    else {
      return Promise.reject(new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))
    }
  }

  @throttle(500)
  async me(): Promise<User> {
    if (this.isAuthenticated) {
      return Promise.resolve(MOCK_USER)
    }
    else {
      return Promise.reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'))
    }
  }

  @throttle(500)
  async updateStatus(data: { statusText?: string | null, statusEmoji?: string | null }): Promise<User> {
    if (this.isAuthenticated) {
      Object.assign(MOCK_USER, data)
      return Promise.resolve(MOCK_USER as User)
    }
    return Promise.reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'))
  }

  @throttle(500)
  async updateUser(data: { name?: string, avatarUrl?: string }): Promise<User> {
    if (this.isAuthenticated) {
      Object.assign(MOCK_USER, data)
      return Promise.resolve(MOCK_USER as User)
    }
    return Promise.reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'))
  }

  @throttle(1000)
  async uploadAvatar(file: File): Promise<User> {
    if (!this.isAuthenticated) {
      return Promise.reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'))
    }
    // eslint-disable-next-line no-console
    console.log(`[Mock] Uploading avatar: ${file.name}`)
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    const newAvatarUrl = URL.createObjectURL(file)
    MOCK_USER.avatarUrl = newAvatarUrl
    return Promise.resolve(MOCK_USER as User)
  }
}
