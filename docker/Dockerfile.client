# =================================================================
# Этап 1: "builder" - Установка зависимостей и сборка клиента
# =================================================================
FROM oven/bun:1 AS builder

# Передаем build-аргументы в контейнер
ARG VITE_APP_SERVER_URL
ARG VITE_APP_SERVER_STATIC_PATH
ARG VITE_APP_TRPC_MODE
ARG VITE_APP_MOCK_MODE
ARG VITE_APP_REQUEST_THROTTLE

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем только файлы манифестов для кеширования зависимостей
COPY package.json  ./
COPY apps/client/package.json ./apps/client/
COPY apps/server/package.json ./apps/server/

# Устанавливаем все зависимости для всего монорепозитория
# Это эффективнее, чем запускать install для каждой папки отдельно
RUN bun install --frozen-lockfile --ignore-scripts

# Теперь копируем весь остальной исходный код
# .dockerignore должен быть настроен, чтобы не копировать лишнее
COPY . .

# Собираем клиентское приложение
# Команда осталась прежней, но теперь выполняется в контексте всего проекта
RUN bun --cwd ./apps/client run build:web

# =================================================================
# Этап 2: "release" - Создание финального образа с Nginx
# =================================================================
FROM nginx:stable-alpine

# Копируем собранные статические файлы из этапа "builder"
# Путь внутри builder теперь /app/apps/client/dist-web
COPY --from=builder /app/apps/client/dist-web /usr/share/nginx/html

# Копируем конфигурацию Nginx. Это хорошая практика, так как конфигурация
# является частью исходного кода клиента.
COPY --from=builder /app/apps/client/nginx.conf /etc/nginx/conf.d/default.conf

# Указываем порт, который будет слушать Nginx (информационно)
EXPOSE 1420

# Запускаем Nginx в режиме "не-демона", чтобы контейнер не завершался
CMD ["nginx", "-g", "daemon off;"]
